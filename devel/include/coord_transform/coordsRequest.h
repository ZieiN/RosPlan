// Generated by gencpp from file coord_transform/coordsRequest.msg
// DO NOT EDIT!


#ifndef COORD_TRANSFORM_MESSAGE_COORDSREQUEST_H
#define COORD_TRANSFORM_MESSAGE_COORDSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <nav_msgs/MapMetaData.h>
#include <geometry_msgs/Pose.h>

namespace coord_transform
{
template <class ContainerAllocator>
struct coordsRequest_
{
  typedef coordsRequest_<ContainerAllocator> Type;

  coordsRequest_()
    : info()
    , input()  {
    }
  coordsRequest_(const ContainerAllocator& _alloc)
    : info(_alloc)
    , input(_alloc)  {
  (void)_alloc;
    }



   typedef  ::nav_msgs::MapMetaData_<ContainerAllocator>  _info_type;
  _info_type info;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _input_type;
  _input_type input;





  typedef boost::shared_ptr< ::coord_transform::coordsRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::coord_transform::coordsRequest_<ContainerAllocator> const> ConstPtr;

}; // struct coordsRequest_

typedef ::coord_transform::coordsRequest_<std::allocator<void> > coordsRequest;

typedef boost::shared_ptr< ::coord_transform::coordsRequest > coordsRequestPtr;
typedef boost::shared_ptr< ::coord_transform::coordsRequest const> coordsRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::coord_transform::coordsRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::coord_transform::coordsRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::coord_transform::coordsRequest_<ContainerAllocator1> & lhs, const ::coord_transform::coordsRequest_<ContainerAllocator2> & rhs)
{
  return lhs.info == rhs.info &&
    lhs.input == rhs.input;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::coord_transform::coordsRequest_<ContainerAllocator1> & lhs, const ::coord_transform::coordsRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace coord_transform

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::coord_transform::coordsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::coord_transform::coordsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coord_transform::coordsRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::coord_transform::coordsRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coord_transform::coordsRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::coord_transform::coordsRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::coord_transform::coordsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4a01d403d0029bb0629ed4ed897cf71";
  }

  static const char* value(const ::coord_transform::coordsRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4a01d403d0029bbULL;
  static const uint64_t static_value2 = 0x0629ed4ed897cf71ULL;
};

template<class ContainerAllocator>
struct DataType< ::coord_transform::coordsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "coord_transform/coordsRequest";
  }

  static const char* value(const ::coord_transform::coordsRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::coord_transform::coordsRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "nav_msgs/MapMetaData info\n"
"geometry_msgs/Pose input\n"
"\n"
"================================================================================\n"
"MSG: nav_msgs/MapMetaData\n"
"# This hold basic information about the characterists of the OccupancyGrid\n"
"\n"
"# The time at which the map was loaded\n"
"time map_load_time\n"
"# The map resolution [m/cell]\n"
"float32 resolution\n"
"# Map width [cells]\n"
"uint32 width\n"
"# Map height [cells]\n"
"uint32 height\n"
"# The origin of the map [m, m, rad].  This is the real-world pose of the\n"
"# cell (0,0) in the map.\n"
"geometry_msgs/Pose origin\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::coord_transform::coordsRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::coord_transform::coordsRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.info);
      stream.next(m.input);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct coordsRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::coord_transform::coordsRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::coord_transform::coordsRequest_<ContainerAllocator>& v)
  {
    s << indent << "info: ";
    s << std::endl;
    Printer< ::nav_msgs::MapMetaData_<ContainerAllocator> >::stream(s, indent + "  ", v.info);
    s << indent << "input: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.input);
  }
};

} // namespace message_operations
} // namespace ros

#endif // COORD_TRANSFORM_MESSAGE_COORDSREQUEST_H
